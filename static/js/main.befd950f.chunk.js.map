{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pixelSize","height","width","drawing","fireState","ctx","pallet","max","length","updateWindowDimensions","bind","assertThisInitialized","getWidth","getHeight","Array","fill","map","_this2","canvas","refs","getContext","emptyFireState","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","_this3","setState","innerWidth","innerHeight","cancelAnimationFrame","removeEventListener","_this4","updateFire","getPixelSize","Math","floor","newState","x","y","mod","round","random","ay","ax","min","ny","nx","pixel","error","drawFire","fillStyle","fillRect","idx","e","_this$state","react_default","a","createElement","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.befd950f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n\tsuper(props);\r\n\r\n\tthis.state = {\r\n\t    pixelSize: 10,\r\n\t    height: 500,\r\n\t    width: 150\r\n\t};\r\n\t\r\n\tthis.drawing = false;\r\n\tthis.fireState = [];\r\n\r\n\tthis.ctx = null;\r\n\r\n\tthis.pallet = ['#070707', '#1f0707', '#2f0f07', '#470f07', '#571707', '#671f07', '#771f07', '#8f2707', '#9f2f07', '#af3f07', '#bf4707', '#c74707', '#DF4F07', '#DF5707', '#DF5707', '#D75F07', '#D7670F', '#cf6f0f', '#cf770f', '#cf7f0f', '#CF8717', '#C78717', '#C78F17', '#C7971F', '#BF9F1F', '#BF9F1F', '#BFA727', '#BFA727', '#BFAF2F', '#B7AF2F', '#B7B72F', '#B7B737', '#CFCF6F', '#DFDF9F', '#EFEFC7', '#FFFFFF'];\r\n\tthis.max = (this.pallet.length - 1);\r\n\r\n\tthis.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    emptyFireState() {\r\n\tconst width = this.getWidth();\r\n\tconst height = this.getHeight();\r\n\r\n\tconst state = Array(height).fill().map(() => Array(width).fill(0));\r\n\tstate[0] = Array(width).fill(this.max);\r\n\r\n\treturn state;\r\n    }\r\n\r\n    \r\n    componentDidMount() {\r\n\tconst canvas = this.refs.canvas;\r\n\tthis.ctx = canvas.getContext(\"2d\");\r\n\r\n\tthis.fireState = this.emptyFireState();\r\n\t\r\n\tthis.rAF = requestAnimationFrame(() => this.updateAnimationState());\r\n\tthis.updateWindowDimensions();\r\n\twindow.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n    \r\n    updateWindowDimensions() {\r\n\tthis.setState({ width: window.innerWidth, height: window.innerHeight }, () => this.fireState = this.emptyFireState());\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n\tcancelAnimationFrame(this.rAF);\r\n\twindow.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateAnimationState() {\r\n\tthis.updateFire();\r\n\t\r\n\tthis.rAF = requestAnimationFrame(() => this.updateAnimationState());\r\n    }\r\n\r\n    resetFire() {\r\n\tthis.fireState = this.emptyFireState();\r\n    }\r\n\r\n    getWidth() {\r\n\tconst { width } = this.state;\r\n\tconst pixelSize = this.getPixelSize();\r\n\treturn Math.floor(width / pixelSize);\r\n    }\r\n    \r\n    getHeight() {\r\n\tconst { height } = this.state;\r\n\tconst pixelSize = this.getPixelSize();\r\n\treturn Math.floor(height / pixelSize);\r\n    }\r\n\r\n    getPixelSize() {\r\n\tconst { pixelSize } = this.state;\r\n\treturn Math.max(1, pixelSize);\r\n    }\r\n\r\n    updateFire() {\r\n\tconst width = this.getWidth();\r\n\tconst height = this.getHeight();\r\n\r\n\tconst newState = this.emptyFireState();\r\n\t\r\n\tfor (let x = 0; x < width; x++) {\r\n\t    for (let y = 0; y < height - 1; y++) {\r\n\t\tconst mod = Math.round(Math.random() * 3.0) & 3;\r\n\t\tconst wave = 0;\r\n\r\n\t\tconst ay = y;\r\n\t\tconst ax = Math.min(x + wave, width);\r\n\t\t\r\n\t\tconst ny = Math.max(y + 1, 0);\r\n\t\tconst nx = Math.min(Math.max(x, 0), width);\r\n\t\t\r\n\t\ttry {\r\n\t\t    const pixel = this.fireState[ay][ax];\t\t    \r\n\t\t    newState[ny][nx] = Math.max(0, pixel - (mod & 1));\r\n\t\t} catch(error) {\r\n\t\t    //\r\n\t\t}\r\n\t    }\r\n\t}\r\n\r\n\tthis.fireState = newState;\r\n\t\r\n\tthis.drawFire();\r\n    }\r\n\r\n    drawFire() {\t\r\n\tconst width = this.getWidth();\r\n\tconst height = this.getHeight();\r\n\tconst pixelSize = this.getPixelSize();\r\n\tconst { ctx } = this;\r\n\t\r\n\tctx.fillStyle = this.pallet[0];\r\n\tctx.fillRect(0, 0, width * pixelSize, height * pixelSize);\r\n\t\r\n\tfor (let x = 0; x < width; x++) {\r\n\t    for (let y = 0; y < height; y++) {\r\n\t\tconst ay = (height - y) - 1;\r\n\t\tconst ax = x;\r\n\r\n\t\ttry {\r\n\t\t    if (this.fireState[ay][ax] !== 0) {\r\n\t\t\tconst idx = this.fireState[ay][ax] || 0;\r\n\t\t\tctx.fillStyle = this.pallet[idx];\r\n\t\t\tctx.fillRect(x * pixelSize, y * pixelSize, pixelSize, pixelSize);\r\n\t\t    }\r\n\t\t} catch (e) {\r\n\t\t    //\r\n\t\t}\r\n\t    }\r\n\t}\r\n    }\r\n\r\n    \r\n    render() {\r\n\tconst { width, height } = this.state;\r\n\t\r\n\treturn (\r\n\t    <div>\r\n\t      <div>\r\n\t\t<canvas ref=\"canvas\" width={ width } height={ height } />\r\n\t      </div>\r\n\t    </div>\r\n\t);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}