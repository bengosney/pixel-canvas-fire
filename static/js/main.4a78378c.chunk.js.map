{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_Component","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","pixelSize","height","width","drawing","fireState","ctx","pallet","max","length","updateWindowDimensions","bind","_assertThisInitialized","_inherits","_createClass","key","value","getWidth","getHeight","console","log","Array","fill","map","_this2","canvas","refs","getContext","emptyFireState","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","_this3","pixelsPerRow","setState","innerWidth","innerHeight","Math","ceil","cancelAnimationFrame","removeEventListener","_this4","updateFire","getPixelSize","newState","x","y","mod","round","random","ay","ax","min","ny","nx","pixel","error","drawFire","fillStyle","fillRect","idx","e","event","parseInt","target","resetFire","_this5","_this$state","React","createElement","className","for","id","type","onChange","changePixelSize","ref","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a78378c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pixelSize: 10,\n      height: 500,\n      width: 150,\n    };\n\n    this.drawing = false;\n    this.fireState = [];\n\n    this.ctx = null;\n\n    this.pallet = [\n      \"#070707\",\n      \"#1f0707\",\n      \"#2f0f07\",\n      \"#470f07\",\n      \"#571707\",\n      \"#671f07\",\n      \"#771f07\",\n      \"#8f2707\",\n      \"#9f2f07\",\n      \"#af3f07\",\n      \"#bf4707\",\n      \"#c74707\",\n      \"#DF4F07\",\n      \"#DF5707\",\n      \"#DF5707\",\n      \"#D75F07\",\n      \"#D7670F\",\n      \"#cf6f0f\",\n      \"#cf770f\",\n      \"#cf7f0f\",\n      \"#CF8717\",\n      \"#C78717\",\n      \"#C78F17\",\n      \"#C7971F\",\n      \"#BF9F1F\",\n      \"#BF9F1F\",\n      \"#BFA727\",\n      \"#BFA727\",\n      \"#BFAF2F\",\n      \"#B7AF2F\",\n      \"#B7B72F\",\n      \"#B7B737\",\n      \"#CFCF6F\",\n      \"#DFDF9F\",\n      \"#EFEFC7\",\n      \"#FFFFFF\",\n    ];\n    this.max = this.pallet.length - 1;\n\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  emptyFireState() {\n    const width = this.getWidth();\n    const height = this.getHeight();\n\n\tconsole.log('height', height);\n    const state = Array(height)\n      .fill()\n      .map(() => Array(width).fill(0));\n    state[0] = Array(width).fill(this.max);\n\n    return state;\n  }\n\n  componentDidMount() {\n    const canvas = this.refs.canvas;\n    this.ctx = canvas.getContext(\"2d\");\n\n    this.fireState = this.emptyFireState();\n\n    this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n\tconst { pixelsPerRow } = this.state;\n    this.setState(\n      { width: window.innerWidth, height: window.innerHeight, pixelSize: Math.ceil(window.innerWidth / pixelsPerRow) },\n      () => (this.fireState = this.emptyFireState())\n    );\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.rAF);\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateAnimationState() {\n    this.updateFire();\n\n    this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n  }\n\n  resetFire() {\n    this.fireState = this.emptyFireState();\n  }\n\n  getWidth() {\n    const { width } = this.state;\n    const pixelSize = this.getPixelSize();\n    return Math.ceil(width / pixelSize);\n  }\n\n  getHeight() {\n    const { height } = this.state;\n    const pixelSize = this.getPixelSize();\n    return Math.max(1, Math.ceil(height / pixelSize));\n  }\n\n  getPixelSize() {\n    const { pixelSize } = this.state;\n    return Math.max(1, pixelSize) || 10;\n  }\n\n  updateFire() {\n    const width = this.getWidth();\n    const height = this.getHeight();\n\n    const newState = this.emptyFireState();\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height - 1; y++) {\n        const mod = Math.round(Math.random() * 3.0) & 3;\n        const wave = 0;\n\n        const ay = y;\n        const ax = Math.min(x + wave, width);\n\n        const ny = Math.max(y + 1, 0);\n        const nx = Math.min(Math.max(x, 0), width);\n\n        try {\n          const pixel = this.fireState[ay][ax];\n          newState[ny][nx] = Math.max(0, pixel - (mod & 1));\n        } catch (error) {\n          //\n        }\n      }\n    }\n\n    this.fireState = newState;\n\n    this.drawFire();\n  }\n\n  drawFire() {\n    const width = this.getWidth();\n    const height = this.getHeight();\n    const pixelSize = this.getPixelSize();\n    const { ctx } = this;\n\n    ctx.fillStyle = this.pallet[0];\n    ctx.fillRect(0, 0, width * pixelSize, height * pixelSize);\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        const ay = height - y - 1;\n        const ax = x;\n\n        try {\n          if (this.fireState[ay][ax] !== 0) {\n            const idx = this.fireState[ay][ax] || 0;\n            ctx.fillStyle = this.pallet[idx];\n            ctx.fillRect(x * pixelSize, y * pixelSize, pixelSize, pixelSize);\n          }\n        } catch (e) {\n          //\n        }\n      }\n    }\n  }\n\n  changePixelSize(event) {\n\tconst pixelSize = parseInt(event.target.value);\n\tif (pixelSize) {\n\t\tconsole.log('set pixelSize', pixelSize);\n\t\tthis.setState({pixelSize});\n\t\tthis.resetFire();\n\t}\n  }\n\n  render() {\n    const { width, height, pixelSize } = this.state;\n\n    return (\n      <div>\n\t\t<div className=\"controls\">\n\t\t\t<label for=\"pixelsize\">Pixel Size</label>\n\t\t\t<input id=\"pixelsize\" type=\"number\" min=\"1\" max=\"100\" value={pixelSize || 10} onChange={(e) => this.changePixelSize(e)} />\n\t\t</div>\n        <div className=\"canvasWrapper\">\n          <canvas ref=\"canvas\" width={width} height={height} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}