{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pixelSize","fontSize","decay","height","width","text","drawing","fireState","ctx","pallet","max","length","_this$state","Array","fill","map","_this2","_this$state2","canvas","refs","getContext","emptyFireState","setInterval","updateFire","_this$state3","newState","x","y","mod","Math","random","ay","ax","ny","nx","min","round","floor","toPrecision","error","console","drawFire","_this$state4","fillStyle","fillRect","font","concat","textAlign","fillText","name","event","target","value","setState","_this3","_this$state5","renderInput","react_default","a","createElement","className","htmlFor","onChange","e","handleChange","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0264f09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n\tsuper(props);\r\n\r\n\tthis.state = {\r\n\t    pixelSize: 4,\r\n\t    fontSize: 6,\r\n\t    decay: 12,\r\n\t    height: 50,\r\n\t    width: 280,\r\n\t    text: \"Hello, World!\"\r\n\t};\r\n\t\r\n\tthis.pixelSize = 4;\r\n\tthis.fontSize = 6;\r\n\tthis.decay = 12;\r\n\tthis.height = 50;\r\n\tthis.width = 280;\r\n\r\n\tthis.drawing = false;\r\n\tthis.fireState = [];\r\n\r\n\tthis.ctx = null;\r\n\r\n\tthis.pallet = ['#070707', '#1f0707', '#2f0f07', '#470f07', '#571707', '#671f07', '#771f07', '#8f2707', '#9f2f07', '#af3f07', '#bf4707', '#c74707', '#DF4F07', '#DF5707', '#DF5707', '#D75F07', '#D7670F', '#cf6f0f', '#cf770f', '#cf7f0f', '#CF8717', '#C78717', '#C78F17', '#C7971F', '#BF9F1F', '#BF9F1F', '#BFA727', '#BFA727', '#BFAF2F', '#B7AF2F', '#B7B72F', '#B7B737', '#CFCF6F', '#DFDF9F', '#EFEFC7', '#FFFFFF'];\r\n\tthis.max = (this.pallet.length - 1);\r\n    }\r\n\r\n    emptyFireState() {\r\n\tconst { height, width } = this.state;\r\n\r\n\tconst state = Array(height).fill().map(() => Array(width).fill(0));\r\n\tstate[0] = Array(width).fill(this.max);\r\n\r\n\treturn state;\r\n    }\r\n\r\n    \r\n    componentDidMount() {\r\n\tconst { height, width, pixelSize, decay } = this.state;\r\n\t\r\n\tconst canvas = this.refs.canvas;\r\n\tthis.ctx = canvas.getContext(\"2d\");\r\n\r\n\tthis.fireState = this.emptyFireState();\r\n\r\n\tsetInterval(() => this.updateFire(), 10);\r\n\t//setTimeout(() => this.updateFire(), 100);\r\n    }\r\n\r\n    resetFire() {\r\n\tthis.fireState = this.emptyFireState();\r\n    }\r\n\r\n    updateFire() {\r\n\tconst { height, width, decay } = this.state;\r\n\r\n\tconst newState = this.emptyFireState();\r\n\t\r\n\tfor (let x = 0; x < width; x++) {\r\n\t    for (let y = 0; y < height - 1; y++) {\r\n\t\tconst min = 5;\r\n\t\tconst max = 9;\r\n\t\t\r\n\t\tconst mod = Math.random();\r\n\t\tconst wave = 0;\r\n\t\t\r\n\t\tconst ay = y;\r\n\t\tconst ax = x;\r\n\r\n\t\tconst ny = ay + 1;\r\n\t\tconst nx = Math.min(Math.max(0, ax + Math.round(wave)), width);\r\n\r\n\t\ttry {\r\n\t\t    newState[ny][nx] = Math.floor(this.fireState[ay][ax] * (1 - (mod.toPrecision(1) / Math.max(1, decay))));\r\n\t\t} catch(error) {\r\n\t\t    console.error(error, ax, ay);\r\n\t\t    return;\r\n\t\t}\r\n\t    }\r\n\t}\r\n\r\n\tthis.fireState = newState;\r\n\t\r\n\tthis.drawFire();\r\n    }\r\n\r\n    drawFire() {\r\n\tconst { height, width, pixelSize, fontSize, text } = this.state;\r\n\tconst { ctx } = this;\r\n\t\r\n\tctx.fillStyle = this.pallet[0];\r\n\tctx.fillRect(0, 0, width * pixelSize, height * pixelSize);\r\n\r\n\tconst drawState = this.fireState;\r\n\t\r\n\tfor (let x = 0; x < width; x++) {\r\n\t    for (let y = 0; y < height; y++) {\r\n\t\tconst ay = (height - y) - 1;\r\n\t\tconst ax = x;\r\n\r\n\t\ttry {\r\n\t\t    if (this.fireState[ay][ax] !== 0) {\r\n\t\t\tctx.fillStyle = this.pallet[this.fireState[ay][ax]];\r\n\t\t\tctx.fillRect(x * pixelSize, y * pixelSize, pixelSize, pixelSize);\r\n\t\t    }\r\n\t\t} catch(error) {\r\n\t\t    console.error(error, ax, ay);\r\n\t\t    return;\r\n\t\t}\r\n\t    }\r\n\t}\r\n\r\n\tctx.font = `${fontSize * pixelSize}px Arial`;\r\n\tctx.fillStyle = \"rgb(255,255,255)\";\r\n\tctx.textAlign = \"center\";\r\n\tctx.fillText(text, (width * pixelSize) / 2, (height * pixelSize) / 2);\r\n    }\r\n\r\n    handleChange(name, event) {\r\n\tconst newState = {};\r\n\r\n\tnewState[name] = event.target.value;\r\n\t\r\n\tthis.setState(newState);\r\n    }\r\n    \r\n    render() {\r\n\tconst { pixelSize, fontSize, decay, height, width, text} = this.state;\r\n\r\n\tconst renderInput = (name, value) => {\r\n\t    return (\r\n\t\t<div className=\"inputchanger\">\r\n\t\t  <label htmlFor={name}>{name}</label>\r\n\t\t  <input name={name} value={ value } onChange={ (e) => this.handleChange(name, e)} />\r\n\t\t</div>\r\n\t    );\r\n\t};\r\n\t\r\n\treturn (\r\n\t    <div>\r\n\t      { renderInput('pixelSize', pixelSize) }\r\n\t      { renderInput('fontSize', fontSize) }\r\n\t      { renderInput('decay', decay) }\r\n\t      { renderInput('text', text) }\r\n\t      <div>\r\n\t\t<canvas ref=\"canvas\" width={ width * pixelSize } height={ height * pixelSize } />\r\n\t      </div>\r\n\t    </div>\r\n\t);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}